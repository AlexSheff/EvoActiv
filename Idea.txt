NeuroFormula ‚Äî AI discovering new mathematical activation laws.

üìò –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–¥–ª—è GitHub)

NeuroFormula ‚Äî —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä –∏ –Ω–µ–ª–∏–Ω–µ–π–Ω—ã—Ö –∞–∫—Ç–∏–≤–∞—Ü–∏–π –¥–ª—è –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π.
–û–Ω–∞ –∫–æ–º–±–∏–Ω–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º —Å —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–π, —Å–æ–∑–¥–∞–≤–∞—è –∏ —Ç–µ—Å—Ç–∏—Ä—É—è –Ω–æ–≤—ã–µ —Ñ–æ—Ä–º—É–ª—ã –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç, —á—Ç–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, sin(2*x + cos(x))) –ø—Ä–µ–≤–æ—Å—Ö–æ–¥—è—Ç –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏.

–ò–¥–µ—è –ø—Ä–æ–µ–∫—Ç–∞ ‚Äî –∫—Ä–∞—Ç–∫–æ (elevator pitch)

EvoFormNet ‚Äî –æ—Ç–∫—Ä—ã—Ç–∞—è –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–æ—Ä–º—É–ª –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π.
–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–æ—Ä–º—É–ª—ã (–≤–∫–ª—é—á–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏, –±–ª–æ–∫–∏, —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏), –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Ö —Å–∏–º–≤–æ–ª—å–Ω–æ –∏ —á–∏—Å–ª–µ–Ω–Ω–æ, –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç –∫–∞–∫ –º–æ–¥—É–ª–∏ –≤ NN, –±–µ–Ω—á–º–∞—Ä–∫–µ—Ç –Ω–∞ –∑–∞–¥–∞—á–∞—Ö (MNIST, CIFAR, audio, PDE), —Ä–∞–Ω–∂–∏—Ä—É–µ—Ç –ø–æ –º–Ω–æ–≥–æ–∫—Ä–∏—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–º—É —Å–∫–æ—Ä—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã. –¶–µ–ª—å ‚Äî –Ω–∞—Ö–æ–¥–∏—Ç—å –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ, –∞–ø–ø–∞—Ä–∞—Ç–Ω–æ-–¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–æ–≤—à–µ—Å—Ç–≤–∞ (–Ω–æ–≤—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏, –º–∏–∫—Ä–æ–±–ª–æ–∫–∏, –∏–Ω–≤–∞—Ä–∏–∞–Ω—Ç—ã), –ø—Ä–∏–≥–æ–¥–Ω—ã–µ –∫–∞–∫ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π, —Ç–∞–∫ –∏ –¥–ª—è –≤–Ω–µ–¥—Ä–µ–Ω–∏—è.

–ü–æ—á–µ–º—É —ç—Ç–æ –∏–º–µ–µ—Ç —Å–º—ã—Å–ª (—Ü–µ–Ω–Ω–æ—Å—Ç–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ)

–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞—Ö–æ–¥–∏—Ç—å –∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ, –±–æ–ª–µ–µ —É—Å—Ç–æ–π—á–∏–≤—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏/–º–∏–∫—Ä–æ–±–ª–æ–∫–∏, –¥–∞—é—â–∏–µ –ª—É—á—à–∏–π trade-off accuracy/params/latency.

–°–ª–∏—è–Ω–∏–µ Symbolic Regression + NAS ‚Äî –Ω–æ–≤—ã–π –∫–ª–∞—Å—Å AutoML, –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–∏—Å–∫—Ä–µ—Ç–Ω—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏.

–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –Ω–∞—É—á–Ω—ã–π –≤–∫–ª–∞–¥: –æ—Ç–∫—Ä—ã—Ç–∏–µ –Ω–æ–≤—ã—Ö —Ç–æ–∂–¥–µ—Å—Ç–≤/–∏–Ω–≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.

–°–æ–æ–±—â–µ—Å—Ç–≤–æ –∏ open-source: —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π + –¥–∞–Ω–Ω—ã–µ + –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã = —Ä–µ—Å—É—Äc –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –∏ –ø—Ä–∞–∫—Ç–∏–∫–∏.

–¶–µ–ª–µ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏

–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–∏ ML (NAS, –∞–∫—Ç–∏–≤–∞—Ü–∏–∏, —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –º–æ–¥–µ–ª–∏).

ML-–∏–Ω–∂–µ–Ω–µ—Ä—ã –∏ —Å—Ç–∞—Ä—Ç–∞–ø—ã, –∏—â—É—â–∏–µ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ, —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –±–ª–æ–∫–∏.

–°–æ–æ–±—â–µ—Å—Ç–≤–æ open-source, –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–µ—Å—è symbolic discovery.

–ß—Ç–æ –ø—Ä–æ–µ–∫—Ç –¥–∞—Å—Ç (KPIs –∏ ROI)

–ö–æ—Ä–æ—Ç–∫–∏–π ROI: –±–∏–±–ª–∏–æ—Ç–µ–∫–∞, –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º—ã–π pipeline, –ø–µ—Ä–≤—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã-–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (MVP –∑–∞ 2‚Äì4 –Ω–µ–¥–µ–ª–∏).

–°—Ä–µ–¥–Ω–∏–π ROI: –Ω–∞–±–æ—Ä –∏–∑ 5‚Äì20 –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π/–±–ª–æ–∫–æ–≤ —Å –±–µ–Ω—á–º–∞—Ä–∫–∞–º–∏ (3‚Äì6 –º–µ—Å).

–î–æ–ª–≥–∏–π ROI: –ø—É–±–ª–∏–∫–∞—Ü–∏–∏, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏, –≤–æ–∑–º–æ–∂–Ω—ã–π –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π –ø—Ä–æ–¥—É–∫—Ç (–∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏, —É—Å–∫–æ—Ä–∏—Ç–µ–ª–∏).

–ö—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞ (—á–µ—Ä–µ–∑ 3 –º–µ—Å—è—Ü–∞):

MVP pipeline (grammar ‚Üí proposer ‚Üí verifier ‚Üí bench) –≤ GitHub.

10‚Äì50 –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —Å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞–º–∏.

1‚Äì3 –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–∏–µ–º accuracy/params/latency –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö ‚â• 0.5% –∏–ª–∏ –∑–Ω–∞—á–∏–º—ã–º —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.

–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏ —Ä–∏—Å–∫–∏

Compute cost: –º–∞—Å—à—Ç–∞–±–Ω—ã–µ –ø–æ–∏—Å–∫–∏ —Ç—Ä–µ–±—É—é—Ç GPU/–∫–ª–∞—Å—Ç–µ—Ä–∞.

–õ–æ–∂–Ω–æ–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–∫—Ä—ã—Ç–∏—è ‚Äî —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ñ–æ—Ä–º–∞–ª—å–Ω–∞—è/—à–∏—Ä–æ–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è.

–ê–ø–ø–∞—Ä–∞—Ç–Ω–∞—è –Ω–µ–ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º—É–ª (–Ω–µ–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏) ‚Äî –Ω—É–∂–Ω–æ penalize.

–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å –∏ adoption: —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ ¬´–º–∞–≥–∏—á–µ—Å–∫–∏–º¬ª —Ñ–æ—Ä–º—É–ª–∞–º.

–ö–ª—é—á–µ–≤—ã–µ –≥–∏–ø–æ—Ç–µ–∑—ã (—á—Ç–æ —Ö–æ—Ç–∏–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å)

–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Ñ–æ—Ä–º—É–ª –º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏, —É–ª—É—á—à–∞—é—â–∏–µ accuracy/robustness –ø—Ä–∏ –º–µ–Ω—å—à–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö.

–ö–æ–º–±–∏–Ω–∞—Ü–∏—è —Å–∏–º–≤–æ–ª—å–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ + —á–∏—Å–ª–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç—Å–µ–∫–∞–µ—Ç –ª—å–≤–∏–Ω—É—é –¥–æ–ª—é –ª–∂–µ–Ω–∞—Ö–æ–¥–æ–∫.

Proposer + RL/—ç–≤–æ–ª—é—Ü–∏—è –±—ã—Å—Ç—Ä–µ–µ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ brute force.

–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä —Ñ—É–Ω–∫—Ü–∏–π (MVP)

Grammar generator (BNF JSON) ‚Äî —Å–∏–Ω—Ç–∞–∫—Å–∏—Å —Ñ–æ—Ä–º—É–ª.

Random proposer + simple evolutionary loop (mutation, selection).

Verifier:

SymPy —É–ø—Ä–æ—â–µ–Ω–∏–µ/–¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏–µ.

–ß–∏—Å–ª–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –Ω–∞ –Ω–∞–±–æ—Ä–µ —Ç–æ—á–µ–∫ (–≥—Ä–∞–¥–∏–µ–Ω—Ç, bounds).

Bench:

Auto-wrap top-K —Ñ–æ—Ä–º—É–ª –≤ PyTorch/TensorFlow –∞–∫—Ç–∏–≤–∞—Ü–∏–∏; —Ç–µ—Å—Ç –Ω–∞ MNIST (MLP/CNN).

Scoring: –º–Ω–æ–≥–æ–∫—Ä–∏—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–π —Å–∫–æ—Ä (accuracy, params, time, grad_friendly, flop_penalty).

Artifact store: JSONL, archive.csv, –≥—Ä–∞—Ñ–∏–∫–∏, saved models (top-k).

README + quickstart notebook.

–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–∏—Å—Ç–µ–º—ã (–≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤–∞—è)

–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:

Generator (G) ‚Äî grammar.json + gen.py

Proposer (P) ‚Äî random / evolutionary / transformer proposer

Verifier (V) ‚Äî sympy + numeric tests (NumPy / JAX / PyTorch)

Bench (E) ‚Äî PyTorch/TensorFlow wrappers, training harness

Scorer & Archivist ‚Äî compute Score(F), save JSONL/CSV, visual reports

UI / Dashboard (optional) ‚Äî Streamlit or simple notebook for human-in-loop

Storage: local artifacts dir or S3 (for scale).

Orchestration: scripts ‚Üí later add Airflow/K8s for scale.

–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å—Ç–µ–∫ (–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)

–Ø–¥—Ä–æ: Python 3.10+

–ë–∏–±–ª–∏–æ—Ç–µ–∫–∏: SymPy, NumPy, Pandas, PyTorch (—Ä–µ–∫–æ–º–µ–Ω–¥—É—é PyTorch –¥–ª—è –≥–∏–±–∫–æ—Å—Ç–∏), optionally TensorFlow, scikit-learn, matplotlib.

Proposer: simple evolutionary (DEAP optional), later Transformers (HuggingFace).

Logging/Artifact: JSONL, CSV, MLflow or W&B (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ).

CI: GitHub Actions, Dockerfile.

License: Apache-2.0 (–Ω–∞—É—á–Ω–æ-–∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã–π –ø—Ä–æ–µ–∫—Ç, —Ä–∞–∑—Ä–µ—à–∞–µ—Ç –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ).

–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π ‚Äî —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ (–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)
evoformnet/
‚îú‚îÄ README.md
‚îú‚îÄ LICENSE
‚îú‚îÄ pyproject.toml / requirements.txt
‚îú‚îÄ docs/
‚îÇ  ‚îî‚îÄ design.md
‚îú‚îÄ evoformnet/
‚îÇ  ‚îú‚îÄ __init__.py
‚îÇ  ‚îú‚îÄ generator.py        # grammar, BNF loader
‚îÇ  ‚îú‚îÄ proposer.py         # random/evo proposer
‚îÇ  ‚îú‚îÄ verifier.py         # sympy numeric checks
‚îÇ  ‚îú‚îÄ bench/
‚îÇ  ‚îÇ  ‚îú‚îÄ trainer.py       # harness to train model with given activation
‚îÇ  ‚îÇ  ‚îî‚îÄ models.py        # model templates
‚îÇ  ‚îú‚îÄ scorer.py
‚îÇ  ‚îú‚îÄ arch_search.py      # orchestration pipeline
‚îÇ  ‚îî‚îÄ utils.py
‚îú‚îÄ experiments/
‚îÇ  ‚îî‚îÄ mnist_quickstart.ipynb
‚îú‚îÄ examples/
‚îÇ  ‚îî‚îÄ run_local.sh
‚îî‚îÄ .github/
   ‚îî‚îÄ workflows/ci.yml

–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ (–∫—Ä–∞—Ç–∫–æ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –¥–µ–ª—É)

–¶–µ–ª—å: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å MVP pipeline, —Å–ø–æ—Å–æ–±–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ä–º—É–ª—ã –∞–∫—Ç–∏–≤–∞—Ü–∏–π, –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Ö –Ω–∞ MNIST.

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:

generator.py ‚Äî —á–∏—Ç–∞—Ç—å grammar.json, –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å N —Ñ–æ—Ä–º—É–ª, –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–π subset (no pow var-var, safe division).

verifier.py ‚Äî –¥–ª—è –∫–∞–∂–¥–æ–π —Ñ–æ—Ä–º—É–ª—ã:

—Å–∏–º–≤–æ–ª—å–Ω–æ–µ —É–ø—Ä–æ—â–µ–Ω–∏–µ (SymPy),

–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ—Å—Ç—å –Ω–∞ –¥–æ–º–µ–Ω–µ (no log ‚â§0, denom ‚â† 0),

–≤—ã—á–∏—Å–ª–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—É—é, —á–∏—Å–ª–µ–Ω–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å min/max and max|grad| on grid,

–ø–æ–º–µ—Ç–∏—Ç—å grad_friendly boolean.

bench/trainer.py ‚Äî –ø—Ä–∏–Ω—è—Ç—å —Ñ—É–Ω–∫—Ü–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (callable), –≤—Å—Ç—Ä–æ–∏—Ç—å –≤ MLP/CNN, –æ–±—É—á–∏—Ç—å N_epochs, –≤–µ—Ä–Ω—É—Ç—å metrics (acc, loss, params, time).

proposer.py ‚Äî evolutionary loop: mutate genomes, evaluate, select top-k, repeat.

scorer.py ‚Äî —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å Score = w1acc - w2params_norm - w3time + w4stability + penalty_if_not_grad_friendly.

arch_search.py ‚Äî CLI: population, generations, epochs, batch, out_dir; —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç JSONL and archive.csv.

–¢–µ—Å—Ç—ã: unit tests –¥–ª—è generator/simplifier/TF wrapper.

–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: quickstart, examples, contribution guide.

MVP-–¥–æ—Ä–æ–∂–Ω–∞—è –∫–∞—Ä—Ç–∞ (—Ñ–∞–∑—ã –∏ –≤—Ä–µ–º—è)

Phase 0 ‚Äî –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ (1‚Äì2 –¥–Ω—è)

–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ, —à–∞–±–ª–æ–Ω, requirements, Dockerfile, README initial.

Phase 1 ‚Äî —è–¥—Ä–æ MVP (4‚Äì7 –¥–Ω–µ–π)

generator.py, verifier.py (SymPy checks), bench/trainer.py (PyTorch minimal), scorer + arch_search CLI.

Run quick experiments (MNIST) ‚Äî produce first candidates.

Phase 2 ‚Äî —É–ª—É—á—à–µ–Ω–∏—è (2‚Äì4 –Ω–µ–¥–µ–ª–∏)

proposer: evolutionary improvements, caching, archive.

TF conversion robustness, grad_friendly detection.

plot generation, JSONL provenance, top-K save.

Phase 3 ‚Äî scale & usability (1‚Äì3 –º–µ—Å—è—Ü–µ–≤)

parallel eval (multiprocessing/k8s), W&B integration, Streamlit dashboard, extended grammar, advanced proposer (RL, transformer), community onboarding.

Phase 4 ‚Äî research & publications (–ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º)

validate best candidates on multiple datasets, write paper/blog, release package on PyPI.

–ü–µ—Ä–≤—ã–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —à–∞–≥–∏ (actionable)

–°–æ–∑–¥–∞—Ç—å GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π evoformnet (public), –¥–æ–±–∞–≤–∏—Ç—å LICENSE (Apache-2.0) –∏ README skeleton.

–ó–∞–∫–æ–º–º–∏—Ç–∏—Ç—å minimal requirements.txt (sympy, numpy, pandas, torch, matplotlib).

–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å generator.py + verifier.py (–≤–Ω—É—Ç—Ä–∏ repo) ‚Äî —Ü–µ–ª—å: –∑–∞ 1 –¥–µ–Ω—å –∏–º–µ—Ç—å runnable script python -m evoformnet.generator --n 100.

–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å bench/trainer.py (PyTorch MLP + wrapper –¥–ª—è custom activation).

–°–æ–±–∏—Ä–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ experiments/mnist_quickstart.ipynb.

–°–æ–±—Ä–∞—Ç—å first demo: –∑–∞–ø—É—Å—Ç–∏—Ç—å pipeline –Ω–∞ 1000 –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤, –ø–æ–ª—É—á–∏—Ç—å top-10, –∑–∞–ø–∏—Å–∞—Ç—å –≤ archive.csv.

–†–∏—Å–∫–∏ –ø–æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ mitigations

–ö–æ–º–±–∏–Ω–∞—Ç–æ—Ä–Ω—ã–π –≤–∑—Ä—ã–≤ ‚Üí mitigation: –≥—Ä–∞–º–º–∞—Ç–∏–∫–∞ —Å cost, proposer guided (learned), early filter by verifier.

–ù–µ—É—Å—Ç–æ–π—á–∏–≤—ã–µ —Ñ–æ—Ä–º—É–ª—ã ‚Üí mitigation: grad_friendly flag –∏ penalize, —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ numeric tests.

High compute ‚Üí mitigation: cheap proxies (few epochs, small datasets) + later full eval on top candidates.

–§–æ—Ä–º–∞—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∏ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–¥–∞—á (issues)

Issue #1: Init repo + basic README

Issue #2: Implement grammar.json + generator.py (safe grammar)

Issue #3: Implement verifier.py (SymPy checks + numeric grid)

Issue #4: Implement bench/trainer.py (PyTorch wrapper for activation)

Issue #5: Implement scorer & arch_search orchestration

Issue #6: Quick MNIST run + produce archive.csv